###############################################################################
# Source Shared Dotfiles
###############################################################################
for file in ~/.{path,exports,aliases,functions,extra}; do
  [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;


###############################################################################
# General Settings
###############################################################################
# Update window size after every command
shopt -s checkwinsize

# Prepend cd to directory names automatically
shopt -s autocd 2> /dev/null
# Correct spelling errors during tab-completion
shopt -s dirspell 2> /dev/null
# Correct spelling errors in arguments supplied to cd
shopt -s cdspell 2> /dev/null

# Save multi-line commands as one command
shopt -s cmdhist
# Append to the history file, don't overwrite it
shopt -s histappend
# Record each line as it gets issued
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"

# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"
# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"
# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"
# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar 2> /dev/null
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# History search with up/down arrows and ctrl-p/ctrl-n
if [[ $- == *i*  ]]; then
  bind '"\e[A": history-search-backward'
  bind '"\e[B": history-search-forward'
  bind '"\eOA": history-search-backward'
  bind '"\eOB": history-search-forward'
  bind '"\C-p": history-search-backward'
  bind '"\C-n": history-search-forward'
fi


###############################################################################
# Bash It
###############################################################################
# Check if bash it is installed
if [[ ! -d ~/.bash_it ]]; then
  git clone https://github.com/Bash-it/bash-it.git ~/.bash_it
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Path to the bash it configuration
export BASH_IT="$HOME/.bash_it"

# Don't check mail when opening terminal.
unset MAILCHECK

# enable version control status checking within the prompt for all themes
export SCM_CHECK=true

# Don't call sudo all the time
export THEME_CHECK_SUDO=false

# Theme settings
export BASH_IT_THEME='powerline'
export POWERLINE_PROMPT='myuser myhost mycwd scm' # With Nerd Fonts
#export POWERLINE_PROMPT='user_info hostname cwd scm' # Without Nerd Fonts
USER_INFO_THEME_PROMPT_COLOR=${POWERLINE_USER_INFO_COLOR:=6}
HOST_THEME_PROMPT_COLOR=${POWERLINE_HOST_COLOR:=5}
CWD_THEME_PROMPT_COLOR=${POWERLINE_CWD_COLOR:=4}
SCM_THEME_PROMPT_CLEAN_COLOR=${POWERLINE_SCM_CLEAN_COLOR:=2}
SCM_THEME_PROMPT_DIRTY_COLOR=${POWERLINE_SCM_DIRTY_COLOR:=1}
SCM_THEME_PROMPT_STAGED_COLOR=${POWERLINE_SCM_STAGED_COLOR:=3}
SCM_THEME_PROMPT_UNSTAGED_COLOR=${POWERLINE_SCM_UNSTAGED_COLOR:=1}
SCM_THEME_PROMPT_COLOR=${SCM_THEME_PROMPT_CLEAN_COLOR}

# Custom powerline segments to include nerd font icons
function __powerline_myuser_prompt() {
	echo " ${USER}|${USER_INFO_THEME_PROMPT_COLOR}"
}
function __powerline_myhost_prompt() {
	echo " $(hostname -s)|${HOST_THEME_PROMPT_COLOR}"
}
function __powerline_mycwd_prompt() {
	echo " $(pwd | sed "s|^${HOME}|~|")|${CWD_THEME_PROMPT_COLOR}"
}

# Load Bash It
source "$BASH_IT"/bash_it.sh

###############################################################################
# Local Config
###############################################################################
if [[ -f ~/.bashrc.local ]]; then
  source ~/.bashrc.local
fi